#!/bin/bash

export USE_CCACHE=1
source ~/.bashrc

INIT=0
DIR="$HOME/android"
CM_VERSION="10.2"

function header {
	echo -e "\n=================="
	echo "$*"
	echo "=================="
}

function configure_env {
	header "Creating directory structure..."
	mkdir -v -p $DIR/system $DIR/gapps $DIR/bin 

	header "Installing dependencies..."
	sudo apt-get update
	sudo apt-get -y install git-core gnupg flex bison gperf libsdl1.2-dev libesd0-dev libwxgtk2.8-dev \
		squashfs-tools build-essential zip curl libncurses5-dev zlib1g-dev openjdk-6-jre openjdk-6-jdk \
		pngcrush schedtool libxml2 libxml2-utils xsltproc g++-multilib lib32z1-dev lib32ncurses5-dev \
		lib32readline5-dev gcc-multilib
	if [ $? -ne 0 ]
	then
		echo "Error installing dependencies!"
		exit 1
	fi

	curl -s https://dl-ssl.google.com/dl/googlesource/git-repo/repo > $DIR/bin/repo
	chmod +x $DIR/bin/repo

	header "Downloading latest Android SDK..."
	cd $DIR
	curl -s http://developer.android.com/sdk/index.html#download > /tmp/sdk.html
	SDK_URL=$(grep adt-bundle-linux-x86_64 /tmp/sdk.html | cut -d"\"" -f2)
	wget $SDK_URL

	header "Uncompressing SDK..."
	SDK_ZIP=$(echo ${SDK_URL##*/})
	unzip -q $SDK_ZIP
	SDK=$(echo $SDK_ZIP | cut -d"." -f1)
	export PATH=$PATH:$SDK/sdk/platform-tools:$SDK/sdk/tools:$DIR/bin
	echo "export PATH=$PATH:$SDK/sdk/platform-tools:$SDK/sdk/tools:$DIR/bin" >> $HOME/.bashrc

	header "Initializing CyanogenMod repository..."
	cd $DIR/system
	repo init -u git://github.com/CyanogenMod/android.git -b cm-$CM_VERSION
}

header "Checking Linux distro..."
DISTRO=$(cat /etc/issue | sed 's/\\l//g' | sed 's/\\n//g')
echo $DISTRO | grep -i debian > /dev/null
if [ $? -eq 0 ]
then
	echo "$DISTRO"
else
	echo -e "Linux distro not supported!\n"
	exit 1
fi

header "Checking for Android SDK..."
echo $PATH | grep 'android' | grep 'sdk' > /dev/null
SDK_EXIST=$?
if [ $SDK_EXIST -ne 0 ]
then
	echo "ERROR: Android SDK not found!"
	echo
	DFT_OPT="N"
	read -p "Do you want to configure the build environment? [N/y] " -n 1 -r REPLY
	echo
	REPLY="${REPLY:-$DFT_OPT}"

	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		echo -e "\nPlease check if you have Android SDK installed and if it's configured correctly.
Also, check if \$SDK/platform-tools is in your \$PATH"
		exit 1
	else
		configure_env
	fi

else
	echo "Android SDK found."
fi

header "Checking for new version of repo..."
cd $DIR/system
repo selfupdate

header "Checking for new versions of Google Apps..."
curl -s http://goo.im/gapps > /tmp/gapps.html
GAPPS=$(grep -A2 "$CM_VERSION.x" /tmp/gapps.html | grep href | awk '{ print $3 }' | cut -d"=" -f2 | sed 's/"//g')
GAPPS_ZIP=$(echo $GAPPS | cut -d"/" -f5)

cd $DIR/gapps/
if [ ! -f ./$GAPPS_ZIP ]
then
	echo "* New version found! *"
	DFT_OPT="Y"
	read -p "Do you want to download the new version of Google Apps? [Y/n] " -n 1 -r REPLY
	echo
	REPLY="${REPLY:-$DFT_OPT}"

	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		header "Downloading new version of Google Apps"
		wget $GAPPS
	fi
else
	echo "Newest version already installed."
fi

header "Syncing CyanogenMod repository..."
cd ~/android/system/
repo sync

cd ~/android/system/vendor/cm/
./get-prebuilts

echo "=================="
DFT_OPT="Y"
read -p "Do you want to build CyanogenMod now? [Y/n] " -n 1 -r REPLY
echo
REPLY="${REPLY:-$DFT_OPT}"
if [[ $REPLY =~ ^[Yy]$ ]]
then
	echo "Starting to build CyanogenMod 10.2..."
	cd $DIR/system/
	source $DIR/system/build/envsetup.sh
	breakfast maguro
	croot
	brunch maguro
	header "Build finished"
else
	echo "Skipping build."
	exit 0
fi

header "Checking for devices..."
DEV=$(adb devices -l | tail -2 | head -1 | grep 'device')
if [ $? -eq 0 ]
then
	DEV_ID=$(echo $DEV | awk '{ print $1 }')
	echo "Device $DEV_ID found."
	echo
else
	echo "No suitable device found."
	echo
	exit 1
fi


echo "=================="
DFT_OPT="Y"
read -p "Do you want to push CyanogenMod to the device $DEV_ID now? [Y/n] " -n 1 -r REPLY
echo
REPLY="${REPLY:-$DFT_OPT}"
if [[ $REPLY =~ ^[Yy]$ ]]
then
	DATE=$(date +%Y%m%d)
	adb push $DIR/system/out/target/product/maguro/cm-10.2-$DATE-UNOFFICIAL-maguro.zip /sdcard/
fi

echo "=================="
DFT_OPT="Y"
read -p "Do you want to push Google Apps to the device $DEV_ID now? [Y/n] " -n 1 -r REPLY
echo
REPLY="${REPLY:-$DFT_OPT}"
if [[ $REPLY =~ ^[Yy]$ ]]
then
	DATE=$(date +%Y%m%d)
	adb push $DIR/gapps/$GAPPS /sdcard/
fi

exit 0
